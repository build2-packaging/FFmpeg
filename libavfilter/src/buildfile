
intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libconfig%lib{config}
impl_libs += $config
import intf_libs += \
  libavutil%lib{avutil} \
  libavcodec%lib{avcodec} \
  libavformat%lib{avformat} \
  libswscale%lib{swscale} \
  libswresample%lib{swresample}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

lib{avfilter}: libul{avfilter}: $impl_libs $intf_libs

# conditional source & assembly
import [once] libconfig%buildfile{conditional-src}
import config_asm = libconfig%file{config.asm}
import config_defs = libconfig%file{enabled-defines}

[rule_hint=c] \
libul{avfilter-meta}: $impl_libs $intf_libs

libul{avfilter}: enabled_source{avfilter}: $config_defs json{files} h{**}: \
                                       update = match

libua{avfilter}: enabled_asm{avfilter-a}: $config_defs $config_asm json{files} libua{avfilter-meta}: \
                                      update = match

libus{avfilter}: enabled_asm{avfilter-s}: $config_defs $config_asm json{files} libus{avfilter-meta}: \
                                      update = match

libs{avfilter}: winres{avfilter}: include = ($c.target.system == 'win32-msvc')
winres{avfilter}: libavfilter/rc{avfilterres} libus{avfilter-meta}

# these c files are included, not built.
libul{avfilter}: adhoc_source{avfilter}: include = adhoc
adhoc_source{avfilter}: libavfilter/c{**_template blend_modes}

libul{avfilter}: libavfilter/c{ \
                  filter_list \
                }: include = adhoc

libavfilter/c{filter_list}: libavfilter/c{allfilters} $config_defs
{{
  diag gen $>

  s = $path($<[0])     # Source file.
  f = $path($>)        # Target file.
  cat $path($<[1]) | set -w defines [string_set]

  sed -n -e 's/.*extern.* AVFilter\s+ff_(\S+);/\1_filter/p' $s | set -n func_list
  if $empty($func_list)
    echo "No filter functions found"
    exit 1
  end
  echo 'static const AVFilter* const filter_list[] = {' > $f
  for c: $func_list
    group = $string.ucase(CONFIG_$c)
    if ($defines[$group])
      echo "    &ff_$c," >> $path($>)
    end
  end
  echo "    NULL };" >> $path($>)
}}
# Build options.
#
import [once] libconfig%buildfile{common-configs}

out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_avfilter

obja{*}: c.poptions += -DCONFIG_STATIC
objs{*}: c.poptions += -DCONFIG_SHARED

libs{avfilter}: def{avfilter}: include = ($c.target.system == 'win32-msvc')
def{avfilter}: libul{avfilter}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.id)
{
  case 'msvc'
  {
    c.coptions += -wd4003 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

# Export options.
#
lib{avfilter}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{avfilter}: bin.lib.version = "-$version.project_id"
else
  lib{avfilter}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
