if (!$defined(libconfig))
  import! libconfig [metadata] = libconfig%lib{config}

# FFmpeg requires a certain level of optimization to inline compile-time capable
# checks and remove dead code, otherwise it'll try to link unbuilt symbols.
coptions = [strings] $c.coptions $cc.coptions
regex = '[-\/]O[d0]'
if($empty($coptions) || $regex.find_search($coptions, $regex))
{
  text "$\tbuilding with -O1: requires optimization for dead code removal"
  if($empty($coptions))
  {
    c.coptions += -O1
  }
  else
  {
    c.coptions   = (!$empty($c.coptions)  ? $regex.apply($c.coptions,  $regex, '-O1') :)
    cc.coptions  = (!$empty($cc.coptions) ? $regex.apply($cc.coptions, $regex, '-O1') :)
  }

  # /RCT[1su] is incompatible with optimization turned on.
  regex = '[-\/]RTC\S'
  if($c.target.system == 'win32-msvc' && !$empty($coptions) && $regex.find_search($coptions, $regex))
  {
    warn "$\tremove /RTC: incompatible with optimizations turned on."
    c.coptions   = (!$empty($c.coptions)  ? $regex.apply($c.coptions,  $regex, '') :)
    cc.coptions  = (!$empty($cc.coptions) ? $regex.apply($cc.coptions, $regex, '') :)
  }
}

# default to highest level of SIMD that can be reasonably
# guaranteed (if none has been specified)
if(!$regex.find_search($c.coptions $cc.coptions, '[-\/]?(?:m|arch)'))
{
  if($c.target.cpu == 'i686' || $c.target.cpu == 'i386' && \
      !$($libconfig: libconfig.disable_sse))
  {
    text "$\tbuilding with -msse: specify '-m' flag to override"
    c.coptions += -msse
  }
  elif($c.target.cpu == 'x86_64' && \
      !$($libconfig: libconfig.disable_sse2))
  {
    text "$\tbuilding with -msse2: specify '-m' flag to override"
    c.coptions += -msse2
  }
  elif($c.target.cpu == 'aarch64' && \
      !$($libconfig: libconfig.disable_neon))
  {
    text "$\tbuilding with -march=armv8-a+simd: specify '-m' flag to override"
    c.coptions += -march=armv8-a+simd
  }
  elif($c.target.cpu == 'arm' && \
      !$($libconfig: libconfig.disable_neon))
  {
    text "$\tbuilding with -mfpu=neon: specify '-m' flag to override"
    c.coptions += -mfpu=neon
  }
  elif($c.target.cpu == 'riscv32' && \
      !$($libconfig: libconfig.disable_rvv))
  {
    text "$\tbuilding with -march=rv64gc_zve32x: specify '-m' flag to override"
    c.coptions += -march=rv64gc_zve32x
  }
  elif($c.target.cpu == 'riscv64' && \
      !$($libconfig: libconfig.disable_rvv))
  {
    text "$\tbuilding with -march=rv32gc_zve32x: specify '-m' flag to override"
    c.coptions += -march=rv32gc_zve32x
  }
}

# see upstream ./configure (but it's not very sensical)

if ($c.id.type == 'msvc')
{
  c.poptions += -DWIN32_LEAN_AND_MEAN \
                -D_CRT_NONSTDC_NO_WARNINGS \
                -D_CRT_SECURE_NO_WARNINGS \
                -D_USE_MATH_DEFINES
  c.coptions += -wd4018 \
                -wd4133 \
                -wd4146 \
                -wd4244 \
                -wd4305 \
                -wd4333 \
                -wd4554

  c.loptions += -LARGEADDRESSAWARE
}

if ($c.id != 'msvc')
{
  if ($c.target.system == 'win32-msvc')
  {
    c.poptions += -DWIN32_LEAN_AND_MEAN \
                  -D_CRT_NONSTDC_NO_WARNINGS \
                  -D_CRT_SECURE_NO_WARNINGS \
                  -D_USE_MATH_DEFINES

    c.loptions += -LARGEADDRESSAWARE:NO
  }
  elif ($c.target.system == 'darwin')
  {
    c.poptions += -D_DARWIN_C_SOURCE
    c.coptions += -mdynamic-no-pic
    c.loptions += -Wl,-dynamic,-search_paths_first
    c.libs     += -framework AudioToolbox \
                  -framework CoreAudio \
                  -framework CoreFoundation \
                  -framework CoreMedia \
                  -framework CoreVideo \
                  -framework VideoToolbox
  }
  else
  {
    c.loptions += -Wl,-Bsymbolic
  }

  c.poptions += -U__STRICT_ANSI__
  c.coptions += -Wno-bool-operation \
                -Wno-char-subscripts \
                -Wno-deprecated-declarations \
                -Wno-format \
                -Wno-format-zero-length \
                -Wno-implicit-function-declaration \
                -Wno-incompatible-pointer-types \
                -Wno-int-conversion \
                -Wno-parentheses \
                -Wno-pointer-sign \
                -Wno-switch \
                -Wno-unused-const-variable \
                -Wno-unused-function \
                -Wno-unused-variable

  switch $c.id: path.match
  {
    case '*clang*'
    {
      c.coptions += -mstack-alignment=16 \
                    -Wno-deprecated-pragma \
                    -Wno-implicit-const-int-float-conversion \
                    -Wno-shift-op-parentheses \
                    -Wno-tautological-compare
    }
    case 'gcc'
    {
      c.poptions += -U__STRICT_ANSI__
      c.coptions += -Wno-maybe-uninitialized

      # unsupported optimizations that when enabled
      # cause runtime errors (observed with GCC
      # when targeting Linux)
      c.coptions += -fno-expensive-optimizations \
                    -fno-delete-null-pointer-checks
    }
  }
}

# ffmpeg always assumes PIC
obj{**}: c.poptions += -DCONFIG_PIC=1 \
                       -DPIC=1

if ($c.target.class != 'windows')
{
  obj{**}:
  {
    c.coptions += -fPIC
  }
}
