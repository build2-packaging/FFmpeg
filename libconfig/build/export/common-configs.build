if (!$defined(libconfig))
  import! libconfig [metadata] = libconfig%lib{config}

# FFmpeg requires a certain level of optimization to inline compile-time capable
# checks and remove dead code, otherwise it'll try to link unbuilt symbols.
if($regex.find_search($c.coptions $cc.coptions, '[-\/]O[d0]'))
{
  text "$\nAppending -O1: FFmpeg requires optimization as it relies on dead code removal."
  c.coptions  = (!$empty($c.coptions) ? $regex.apply($c.coptions, '[-\/]O[d0]', '-O1') :)
  cc.coptions  = (!$empty($cc.coptions) ? $regex.apply($cc.coptions, '[-\/]O[d0]', '-O1') :)

  # /RCT[1su] is incompatible with optimization turned on.
  if ($c.target.system == 'win32-msvc')
  {
    text "$\nRemove /RTC: Incompatible with optimizations turned on."
    c.coptions  = (!$empty($c.coptions) ? $regex.apply($c.coptions, '[-\/]RTC\S', '') :)
    cc.coptions  = (!$empty($cc.coptions) ? $regex.apply($cc.coptions, '[-\/]RTC\S', '') :)
  }
}

switch $c.target.cpu $c.id.type
{
  case 'x86_64' 'msvc'
  {
    if (!$($libconfig: libconfig.disable_avx2))
      c.coptions += -arch:AVX2
    elif (!$($libconfig: libconfig.disable_sse3))
      c.coptions += -arch:SSE3
    elif (!$($libconfig: libconfig.disable_sse2))
      c.coptions += -arch:SSE2
    elif (!$($libconfig: libconfig.disable_sse))
      c.coptions += -arch:SSE
  }
  case 'x86_64' 'gcc'
  {
    if (!$($libconfig: libconfig.disable_fma4))
      c.coptions += -mfma4
    elif (!$($libconfig: libconfig.disable_fma3))
      c.coptions += -mfma3
    elif (!$($libconfig: libconfig.disable_avx2))
      c.coptions += -mavx2
    elif (!$($libconfig: libconfig.disable_sse2))
      c.coptions += -msse2
    elif (!$($libconfig: libconfig.disable_sse))
      c.coptions += -msse
    elif (!$($libconfig: libconfig.disable_mmx))
      c.coptions += -mmmx
  }
}

# see upstream ./configure (but it's not very sensical)

if ($c.id.type == 'msvc')
{
  c.poptions += -DWIN32_LEAN_AND_MEAN \
                -D_CRT_NONSTDC_NO_WARNINGS \
                -D_CRT_SECURE_NO_WARNINGS \
                -D_USE_MATH_DEFINES
  c.coptions += -wd4018 \
                -wd4133 \
                -wd4146 \
                -wd4244 \
                -wd4305 \
                -wd4333 \
                -wd4554

  c.loptions += -LARGEADDRESSAWARE

  objs{**}: c.poptions += -DCONFIG_PIC=1 \
                          -DPIC=1
  obja{**}: c.poptions += -DCONFIG_PIC=0
}

if ($c.id != 'msvc')
{
  if ($c.target.system == 'win32-msvc')
  {
    c.poptions += -DWIN32_LEAN_AND_MEAN \
                  -D_CRT_NONSTDC_NO_WARNINGS \
                  -D_CRT_SECURE_NO_WARNINGS \
                  -D_USE_MATH_DEFINES

    c.loptions += -LARGEADDRESSAWARE:NO
  }
  elif ($c.target.system == 'darwin')
  {
    c.poptions += -D_DARWIN_C_SOURCE
    c.coptions += -mdynamic-no-pic
    c.loptions += -Wl,-dynamic,-search_paths_first
    c.libs     += -framework AudioToolbox \
                  -framework CoreAudio \
                  -framework CoreFoundation \
                  -framework CoreMedia \
                  -framework CoreVideo \
                  -framework VideoToolbox
  }
  else
  {
    c.loptions += -Wl,-Bsymbolic
  }

  c.poptions += -U__STRICT_ANSI__
  c.coptions += -Wno-bool-operation \
                -Wno-char-subscripts \
                -Wno-deprecated-declarations \
                -Wno-deprecated-non-prototype \
                -Wno-format \
                -Wno-format-zero-length \
                -Wno-implicit-function-declaration \
                -Wno-incompatible-pointer-types \
                -Wno-int-conversion \
                -Wno-parentheses \
                -Wno-pointer-sign \
                -Wno-switch \
                -Wno-unused-const-variable \
                -Wno-unused-function \
                -Wno-unused-variable

  if ($c.target.class != 'windows')
  {
    c.coptions += -fno-math-errno \
                  -fno-signed-zeros \
                  -fomit-frame-pointer

    obj{**}:
    {
      c.poptions += -DCONFIG_PIC=1 -DPIC=1
      c.coptions += -fPIC
    }
  }


  switch $c.id: path.match
  {
    case '*clang*'
    {
      c.coptions += -mstack-alignment=16 \
                    -Wno-deprecated-pragma \
                    -Wno-implicit-const-int-float-conversion \
                    -Wno-shift-op-parentheses \
                    -Wno-tautological-compare
    }
    case 'gcc'
    {
      c.poptions += -U__STRICT_ANSI__
      c.coptions += -Wno-maybe-uninitialized
    }
  }
}
