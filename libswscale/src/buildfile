import intf_libs = libavutil%lib{avutil}

impl_libs = # Implementation dependencies.

# A utility library is required by the bin.def rule and the unit test
# executables.
#
./: lib{swscale}: libul{swscale}

# Headers.
#
libul{swscale}: libswscale/h{**}

# Included source files
#
libul{swscale}: libswscale/c{**_template}: include = adhoc

# Compiled source files
#
libul{swscale}: libswscale/c{alphablend           \
			     hscale               \
			     hscale_fast_bilinear \
			     gamma                \
			     half2float           \
			     input                \
			     options              \
			     output               \
			     rgb2rgb              \
			     slice                \
			     swscale              \
			     swscale_unscaled     \
			     utils                \
			     version              \
			     yuv2rgb              \
			     vscale}

# Note: This source file is a symlink to libavutil/log2_tab.c. Upstream this
#       is done via `#include "libavutil/log2_tab.c"`.
#
libul{swscale}: libswscale/c{log2_tab}

# @@ TODO Disabled for the time being but see note in libavutil/src/buildfile.
#
# libs{swscale}: winres{swscale}: include = ($c.target.system == 'win32-msvc')
# winres{swscale}: libswscale/rc{swscaleres} libus{swscale-meta}

# Build options.
#
import [once] libconfig%buildfile{common-configs}

out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_swscale

obja{*}: c.poptions += -DCONFIG_STATIC
objs{*}: c.poptions += -DCONFIG_SHARED

libs{swscale}: def{swscale}: include = ($c.target.system == 'win32-msvc')
def{swscale}: libul{swscale}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.id)
{
  case 'msvc'
  {
    c.coptions += -wd4003 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

# Export options.
#
lib{swscale}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{swscale}: bin.lib.version = "-$version.project_id"
else
  lib{swscale}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
