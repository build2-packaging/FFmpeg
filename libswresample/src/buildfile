
intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import config = libconfig%lib{config}
impl_libs += $config
import intf_libs += \
  libavutil%liba{avutil} \
  libswscale%liba{swscale}

cpu = [string] $c.target.cpu
tgt_win32 = [bool] ($c.target.system == 'win32-msvc')
tgt_macos = [bool] ($c.target.system == 'darwin')

lib{swresample}: libul{swresample}: libswresample/h{**} $impl_libs $intf_libs

import [once] libconfig%buildfile{conditional-src}
import config_asm = libconfig%file{config.asm}
import config_defs = libconfig%file{enabled-defines}

[rule_hint=c] \
libul{swresample-meta}: $impl_libs $intf_libs
libul{swresample}: enabled_source{swresample}: $config_defs libua{swresample-meta} json{files.json} \
                                               $config_asm libswresample/h{**}: \
                                             update = match

libul{swresample}: resource{swresample}: include = ($c.target.system == 'win32-msvc')
resource{swresample}: libua{swresample-meta} libswresample/rc{swresampleres}

if ($c.target.system == 'win32-msvc')
  c.loptions += "$out_base/libswresample/swresampleres.res"

# these c files are included, not built.
libul{swresample}: adhoc_source{swresample}: include = adhoc
adhoc_source{swresample}: libswresample/c{**_template noise_shaping_data}

# Build options.
#
import [once] libconfig%buildfile{common-configs}

out_pfx = [dir_path] $out_root/src/
src_pfx = [dir_path] $src_root/src/

c.poptions += "-I$out_pfx" "-I$src_pfx" -DBUILDING_swresample

obja{*}: c.poptions += -DCONFIG_STATIC
objs{*}: c.poptions += -DCONFIG_SHARED

libs{swresample}: def{swresample}: include = ($c.target.system == 'win32-msvc')
def{swresample}: libul{swresample}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# System libraries
sys_libs =
switch $c.target.class, $c.target.system
{
  case 'windows', 'win32-msvc'
    sys_libs += bcrypt.lib
  case 'windows', 'mingw32'
    sys_libs += -lbcrypt
}
c.libs += $sys_libs

switch ($c.id)
{
  case 'msvc'
  {
    c.coptions += -wd4003 -wd4018 -wd4146 -wd4244 -wd4305 -wd4554 -wd4133 -wd4333
    c.poptions += -DWIN32_LEAN_AND_MEAN -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS
  }
}

# Export options.
#
lib{swresample}:
{
  c.export.poptions = "-I$out_pfx" "-I$src_pfx"
  c.export.libs = $intf_libs $sys_libs
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{swresample}: bin.lib.version = "-$version.project_id"
else
  lib{swresample}: bin.lib.version = "-$version.major.$version.minor"

# Install recreating subdirectories.
#
h{*}:
{
  install         = include/
  install.subdirs = true
}
